
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000658  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000545  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f7  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
	PORTA=0;
}
int main(void)
{
	DDRA = 0b00001111;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a bb       	out	0x1a, r24	; 26
	uint16_t UBRRValue = 103;
	UBRRL = (uint8_t)UBRRValue;
  70:	87 e6       	ldi	r24, 0x67	; 103
  72:	89 b9       	out	0x09, r24	; 9
	UBRRH = (uint8_t)(UBRRValue>>8);
  74:	10 bc       	out	0x20, r1	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN);
  76:	88 e1       	ldi	r24, 0x18	; 24
  78:	8a b9       	out	0x0a, r24	; 10
	UCSRC|= (3<<UCSZ0);
  7a:	80 b5       	in	r24, 0x20	; 32
  7c:	86 60       	ori	r24, 0x06	; 6
  7e:	80 bd       	out	0x20, r24	; 32
{
	PORTA=0b00001010;
}
void right()
{
	PORTA=0b00001001;
  80:	49 e0       	ldi	r20, 0x09	; 9
{
	PORTA=0b00000101;
}
void backward()
{
	PORTA=0b00001010;
  82:	3a e0       	ldi	r19, 0x0A	; 10
#include <util/delay.h>


void forward()
{
	PORTA=0b00000101;
  84:	25 e0       	ldi	r18, 0x05	; 5
{
	PORTA=0b00001001;
}
void left()
{
	PORTA=0b00000110;
  86:	96 e0       	ldi	r25, 0x06	; 6
	UCSRB = (1<<RXEN)|(1<<TXEN);
	UCSRC|= (3<<UCSZ0);
    /* Replace with your application code */
    while (1) 
    {
		while(!(UCSRA&(1<<RXC)));
  88:	5f 9b       	sbis	0x0b, 7	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x1c>
		//PORTC=UDR;
		//if(UDR=='a')
		//forward();
		
		switch(UDR)
  8c:	8c b1       	in	r24, 0x0c	; 12
  8e:	84 34       	cpi	r24, 0x44	; 68
  90:	61 f0       	breq	.+24     	; 0xaa <main+0x3e>
  92:	18 f4       	brcc	.+6      	; 0x9a <main+0x2e>
  94:	81 34       	cpi	r24, 0x41	; 65
  96:	59 f0       	breq	.+22     	; 0xae <main+0x42>
  98:	0c c0       	rjmp	.+24     	; 0xb2 <main+0x46>
  9a:	83 35       	cpi	r24, 0x53	; 83
  9c:	21 f0       	breq	.+8      	; 0xa6 <main+0x3a>
  9e:	87 35       	cpi	r24, 0x57	; 87
  a0:	41 f4       	brne	.+16     	; 0xb2 <main+0x46>
#include <util/delay.h>


void forward()
{
	PORTA=0b00000101;
  a2:	2b bb       	out	0x1b, r18	; 27
  a4:	07 c0       	rjmp	.+14     	; 0xb4 <main+0x48>
}
void backward()
{
	PORTA=0b00001010;
  a6:	3b bb       	out	0x1b, r19	; 27
  a8:	05 c0       	rjmp	.+10     	; 0xb4 <main+0x48>
}
void right()
{
	PORTA=0b00001001;
  aa:	4b bb       	out	0x1b, r20	; 27
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x48>
}
void left()
{
	PORTA=0b00000110;
  ae:	9b bb       	out	0x1b, r25	; 27
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <main+0x48>
}
void stop()
{
	PORTA=0;
  b2:	1b ba       	out	0x1b, r1	; 27
		case 'S': backward(); break;
		case 'D':right(); break;
		case'A': left();  break;
		default : stop(); break;
		}
		UDR=0;
  b4:	1c b8       	out	0x0c, r1	; 12
		
    }
  b6:	e8 cf       	rjmp	.-48     	; 0x88 <main+0x1c>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
