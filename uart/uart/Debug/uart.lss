
uart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000744  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b9  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e5  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001542  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	PORTA=0b00000110;
}

int main(void)
{
	DDRA = 0b00001111;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a bb       	out	0x1a, r24	; 26
#include <util/delay.h>


void forward()
{
	PORTA=0b00000101;
  70:	35 e0       	ldi	r19, 0x05	; 5
}
void backward()
{
	PORTA=0b00001010;
  72:	2a e0       	ldi	r18, 0x0A	; 10
}
void right()
{
	PORTA=0b00001001;
  74:	99 e0       	ldi	r25, 0x09	; 9
}
void left()
{
	PORTA=0b00000110;
  76:	86 e0       	ldi	r24, 0x06	; 6
#include <util/delay.h>


void forward()
{
	PORTA=0b00000101;
  78:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7a:	4f e3       	ldi	r20, 0x3F	; 63
  7c:	5d e0       	ldi	r21, 0x0D	; 13
  7e:	63 e0       	ldi	r22, 0x03	; 3
  80:	41 50       	subi	r20, 0x01	; 1
  82:	50 40       	sbci	r21, 0x00	; 0
  84:	60 40       	sbci	r22, 0x00	; 0
  86:	e1 f7       	brne	.-8      	; 0x80 <main+0x14>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0x1e>
  8a:	00 00       	nop
}
void backward()
{
	PORTA=0b00001010;
  8c:	2b bb       	out	0x1b, r18	; 27
  8e:	4f e3       	ldi	r20, 0x3F	; 63
  90:	5d e0       	ldi	r21, 0x0D	; 13
  92:	63 e0       	ldi	r22, 0x03	; 3
  94:	41 50       	subi	r20, 0x01	; 1
  96:	50 40       	sbci	r21, 0x00	; 0
  98:	60 40       	sbci	r22, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
}
void right()
{
	PORTA=0b00001001;
  a0:	9b bb       	out	0x1b, r25	; 27
  a2:	4f e3       	ldi	r20, 0x3F	; 63
  a4:	5d e0       	ldi	r21, 0x0D	; 13
  a6:	63 e0       	ldi	r22, 0x03	; 3
  a8:	41 50       	subi	r20, 0x01	; 1
  aa:	50 40       	sbci	r21, 0x00	; 0
  ac:	60 40       	sbci	r22, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
}
void left()
{
	PORTA=0b00000110;
  b4:	8b bb       	out	0x1b, r24	; 27
  b6:	4f e3       	ldi	r20, 0x3F	; 63
  b8:	5d e0       	ldi	r21, 0x0D	; 13
  ba:	63 e0       	ldi	r22, 0x03	; 3
  bc:	41 50       	subi	r20, 0x01	; 1
  be:	50 40       	sbci	r21, 0x00	; 0
  c0:	60 40       	sbci	r22, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x50>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x5a>
  c6:	00 00       	nop
  c8:	d7 cf       	rjmp	.-82     	; 0x78 <main+0xc>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
